var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BinaryHypervectors","category":"page"},{"location":"#BinaryHypervectors","page":"Home","title":"BinaryHypervectors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BinaryHypervectors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BinaryHypervectors]","category":"page"},{"location":"#BinaryHypervectors.BinaryHypervector-Tuple{T} where T<:(AbstractVector)","page":"Home","title":"BinaryHypervectors.BinaryHypervector","text":"BinaryHypervector(x::BitVector)\n\nCreate a BinaryHypervector by rounding an AbstractVector elementwise to 0 or >= 0.5.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Tuple{BinaryHypervector, BinaryHypervector}","page":"Home","title":"Base.:*","text":"Base.:*(x::BitVector, y::BitVector)\n\nBinds two bit vectors. Equivalent to bind(x, y).\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Tuple{BinaryHypervector, BinaryHypervector}","page":"Home","title":"Base.:+","text":"Base.:+(x::BitVector, y::BitVector)\n\nBundle two bit vectors. Equivalent to bundle(x, y).\n\n\n\n\n\n","category":"method"},{"location":"#Base.bind-Tuple{BinaryHypervector, BinaryHypervector}","page":"Home","title":"Base.bind","text":"bind(x, y)\n\nBind two vectors using XOR. Applied efficiently by exploiting the chunk structure of BitVectors.\n\n\n\n\n\n","category":"method"},{"location":"#Base.circshift-Tuple{BinaryHypervector, Any}","page":"Home","title":"Base.circshift","text":"Base.circshift(x::BinaryHypervector, n)\n\nPermute the BinaryHypervector by performing the circular shift n bits to the right.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryHypervectors.bundle-Tuple","page":"Home","title":"BinaryHypervectors.bundle","text":"bundle(vecs...)\n\nBundle vectors using majority rule.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryHypervectors.hammingsimilarity-Tuple{Any, Any}","page":"Home","title":"BinaryHypervectors.hammingsimilarity","text":"hammingsimilarity(x, y)\n\nCompute 1 minus the normalized Hamming distance between the vectors x and y. Uses chunk structure of BitVectors for speed.\n\n\n\n\n\n","category":"method"}]
}
